% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/minimize.R
\name{minimize}
\alias{minimize}
\title{Minimization routine}
\usage{
minimize(y, x_coeff, spl_u, intercept, loss_fun, ...)
}
\arguments{
\item{y}{Numeric vector of scalar responses.}

\item{loss_fun}{String specifying the loss function. 'ls' for least squares,
'huang' for Huber, 'lmrob' for MM-estimator.}

\item{x_coeff_ft}{Matrix with coefficients for the functional term
decomposition.}

\item{u}{Numeric vector with values of the explanatory variable that enters
the model non-parametrically.}

\item{w}{Numeric vector with varying coefficients for the non-parametric
term (w = 1 for non varying coefficients).}

\item{k_npt}{Number of splines for the non-parametric term.}

\item{k_ft}{Number of splines for the functional term.}

\item{norder}{Integer for spline order (norder = 4 for cubic splines).}

\item{rob.control}{Optional parameters if \code{loss_fun == "lmbrob"}.}
}
\value{
A list with components:
\describe{
  \item{estimates_npt}{estimate for the non parametric term,}
  \item{estimates_ft}{estimate for the functional slope,}
  \item{value}{the minimum value of the loss,}
  \item{scale}{the scale estimate.}
}
}
\description{
This function is the minimization routine used internally by
\code{FPLMBsplines_fit()}, not meant for 'public' use.
}
\examples{

## Synthetic data
y <- rnorm(100)
x <- matrix(rnorm(5 * 100), ncol = 5)
u <- runif(100)
w <- 1

## Least-squares estimation
minimize(y, x, u, w, k_npt = 5, k_ft = 6, loss_fun = "ls", norder = 4)

## M-estimation
minimize(y, x, u, w, k_npt = 5, k_ft = 6, loss_fun = "huang", norder = 4)

## MM-estimation
minimize(y, x, u, w, k_npt = 5, k_ft = 6, loss_fun = "lmrob", norder = 4)

## MM-estimation with 95\% of efficiency
minimize(y, x, u, w,
  k_npt = 5, k_ft = 6, loss_fun = "lmrob", norder = 4,
  rob.control = list(tuning.psi = 4.685061)
)
}
